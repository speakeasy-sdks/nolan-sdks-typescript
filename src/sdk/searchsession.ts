/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class SearchSession {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Create Search Session [private]
     *
     * @remarks
     * This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
     */
    async create(
        req: operations.CreateSearchSessionApiV1WorkspacesWorkspaceNameSearchSessionsPostRequest,
        security: operations.CreateSearchSessionApiV1WorkspacesWorkspaceNameSearchSessionsPostSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateSearchSessionApiV1WorkspacesWorkspaceNameSearchSessionsPostResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.CreateSearchSessionApiV1WorkspacesWorkspaceNameSearchSessionsPostRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/search_sessions",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.CreateSearchSessionApiV1WorkspacesWorkspaceNameSearchSessionsPostSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateSearchSessionApiV1WorkspacesWorkspaceNameSearchSessionsPostResponse =
            new operations.CreateSearchSessionApiV1WorkspacesWorkspaceNameSearchSessionsPostResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.searchSessionPostResponse = utils.objectToClass(
                        httpRes?.data,
                        shared.SearchSessionPostResponse
                    );
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }
}

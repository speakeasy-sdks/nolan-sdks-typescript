/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class UploadSession {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Close Session
     *
     * @remarks
     * Closes the session and starts the ingestion process.
     * If the session is not closed explicitly, the session will be automatically closed after 24 hours.
     */
    async close(
        req: operations.CloseSessionApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdPutRequest,
        security: operations.CloseSessionApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdPutSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CloseSessionApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdPutResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.CloseSessionApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdPutRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/upload_sessions/{session_id}",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "closeSession", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.CloseSessionApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdPutSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "put",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CloseSessionApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdPutResponse =
            new operations.CloseSessionApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdPutResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case [204, 404].includes(httpRes?.status):
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Create Upload Session
     *
     * @remarks
     * Creates a session for uploading files and file metadata. The session remains active for 24 hours. You can upload up to 10 000 files in a session.
     */
    async create(
        req: operations.CreateUploadSessionApiV1WorkspacesWorkspaceNameUploadSessionsPostRequest,
        security: operations.CreateUploadSessionApiV1WorkspacesWorkspaceNameUploadSessionsPostSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CreateUploadSessionApiV1WorkspacesWorkspaceNameUploadSessionsPostResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.CreateUploadSessionApiV1WorkspacesWorkspaceNameUploadSessionsPostRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/upload_sessions",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "createSession", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.CreateUploadSessionApiV1WorkspacesWorkspaceNameUploadSessionsPostSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CreateUploadSessionApiV1WorkspacesWorkspaceNameUploadSessionsPostResponse =
            new operations.CreateUploadSessionApiV1WorkspacesWorkspaceNameUploadSessionsPostResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.uploadSession = utils.objectToClass(httpRes?.data, shared.UploadSession);
                }
                break;
            case httpRes?.status == 415:
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Session Files
     *
     * @remarks
     * Displays the file details of a session. Use this endpoint to check the status of the files in a session or the session expiration date.
     */
    async getFiles(
        req: operations.GetSessionFilesApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdFilesGetRequest,
        security: operations.GetSessionFilesApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdFilesGetSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetSessionFilesApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdFilesGetResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetSessionFilesApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdFilesGetRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/upload_sessions/{session_id}/files",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetSessionFilesApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdFilesGetSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetSessionFilesApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdFilesGetResponse =
            new operations.GetSessionFilesApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdFilesGetResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.paginatedSessionFile = utils.objectToClass(
                        httpRes?.data,
                        shared.PaginatedSessionFile
                    );
                }
                break;
            case httpRes?.status == 404:
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Session Status
     *
     * @remarks
     * Displays the details of a session. Use this endpoint to check the status of the files in a session or the session expiration date.
     */
    async getStatus(
        req: operations.GetSessionStatusApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdGetRequest,
        security: operations.GetSessionStatusApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdGetSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetSessionStatusApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdGetResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetSessionStatusApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdGetRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/upload_sessions/{session_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetSessionStatusApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdGetSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetSessionStatusApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdGetResponse =
            new operations.GetSessionStatusApiV1WorkspacesWorkspaceNameUploadSessionsSessionIdGetResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.sessionDetail = utils.objectToClass(httpRes?.data, shared.SessionDetail);
                }
                break;
            case httpRes?.status == 404:
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Upload Sessions
     *
     * @remarks
     * Returns a list of all active upload sessions.
     */
    async list(
        req: operations.ListUploadSessionsApiV1WorkspacesWorkspaceNameUploadSessionsGetRequest,
        security: operations.ListUploadSessionsApiV1WorkspacesWorkspaceNameUploadSessionsGetSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.ListUploadSessionsApiV1WorkspacesWorkspaceNameUploadSessionsGetResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.ListUploadSessionsApiV1WorkspacesWorkspaceNameUploadSessionsGetRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/upload_sessions",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.ListUploadSessionsApiV1WorkspacesWorkspaceNameUploadSessionsGetSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion} ${this.sdkConfiguration.openapiDocVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.ListUploadSessionsApiV1WorkspacesWorkspaceNameUploadSessionsGetResponse =
            new operations.ListUploadSessionsApiV1WorkspacesWorkspaceNameUploadSessionsGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.paginatedSession = utils.objectToClass(
                        httpRes?.data,
                        shared.PaginatedSession
                    );
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }
}

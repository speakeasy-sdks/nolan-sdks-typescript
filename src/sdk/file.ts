/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class File {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Delete Files
   *
   * @remarks
   * Deletes files in a workspace. Deletes all files if no file_names provided.
   */
  async deleteMulti(
    req: operations.DeleteFilesApiV1WorkspacesWorkspaceNameFilesDeleteRequest,
    security: operations.DeleteFilesApiV1WorkspacesWorkspaceNameFilesDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteFilesApiV1WorkspacesWorkspaceNameFilesDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteFilesApiV1WorkspacesWorkspaceNameFilesDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/files",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteFilesApiV1WorkspacesWorkspaceNameFilesDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "delete",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DeleteFilesApiV1WorkspacesWorkspaceNameFilesDeleteResponse =
      new operations.DeleteFilesApiV1WorkspacesWorkspaceNameFilesDeleteResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.deleteFilesApiV1WorkspacesWorkspaceNameFilesDelete200ApplicationJSONAny =
            httpRes?.data;
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Delete File
   *
   * @remarks
   * Removes the file from the workspace.
   */
  async deleteSingle(
    req: operations.DeleteFileApiV1WorkspacesWorkspaceNameFilesFileIdDeleteRequest,
    security: operations.DeleteFileApiV1WorkspacesWorkspaceNameFilesFileIdDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.DeleteFileApiV1WorkspacesWorkspaceNameFilesFileIdDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.DeleteFileApiV1WorkspacesWorkspaceNameFilesFileIdDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/files/{file_id}",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.DeleteFileApiV1WorkspacesWorkspaceNameFilesFileIdDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "delete",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.DeleteFileApiV1WorkspacesWorkspaceNameFilesFileIdDeleteResponse =
      new operations.DeleteFileApiV1WorkspacesWorkspaceNameFilesFileIdDeleteResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.deleteFileApiV1WorkspacesWorkspaceNameFilesFileIdDelete200ApplicationJSONAny =
            httpRes?.data;
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get File
   *
   * @remarks
   * Retrieves the file contents.
   */
  async get(
    req: operations.GetFileApiV1WorkspacesWorkspaceNameFilesFileIdGetRequest,
    security: operations.GetFileApiV1WorkspacesWorkspaceNameFilesFileIdGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFileApiV1WorkspacesWorkspaceNameFilesFileIdGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetFileApiV1WorkspacesWorkspaceNameFilesFileIdGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/files/{file_id}",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetFileApiV1WorkspacesWorkspaceNameFilesFileIdGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetFileApiV1WorkspacesWorkspaceNameFilesFileIdGetResponse =
      new operations.GetFileApiV1WorkspacesWorkspaceNameFilesFileIdGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.getFileApiV1WorkspacesWorkspaceNameFilesFileIdGet200ApplicationJSONAny =
            httpRes?.data;
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get Document
   *
   * @remarks
   * Returns all documents generated for a file.
   */
  async getDocument(
    req: operations.GetDocumentApiV1WorkspacesWorkspaceNameFilesFileIdDocumentsGetRequest,
    security: operations.GetDocumentApiV1WorkspacesWorkspaceNameFilesFileIdDocumentsGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetDocumentApiV1WorkspacesWorkspaceNameFilesFileIdDocumentsGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetDocumentApiV1WorkspacesWorkspaceNameFilesFileIdDocumentsGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/files/{file_id}/documents",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetDocumentApiV1WorkspacesWorkspaceNameFilesFileIdDocumentsGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetDocumentApiV1WorkspacesWorkspaceNameFilesFileIdDocumentsGetResponse =
      new operations.GetDocumentApiV1WorkspacesWorkspaceNameFilesFileIdDocumentsGetResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.documents = utils.objectToClass(httpRes?.data, shared.Documents);
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get File Meta
   *
   * @remarks
   * Displays the metadata of a file.
   */
  async getMetaData(
    req: operations.GetFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaGetRequest,
    security: operations.GetFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/files/{file_id}/meta",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaGetResponse =
      new operations.GetFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaGetResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.responseGetFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaGet =
            utils.objectToClass(httpRes?.data);
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * List Files
   *
   * @remarks
   * List files in a workspace. This endpoint supports pagination and filtering by name and metadata.
   */
  async list(
    req: operations.ListFilesApiV1WorkspacesWorkspaceNameFilesGetRequest,
    security: operations.ListFilesApiV1WorkspacesWorkspaceNameFilesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListFilesApiV1WorkspacesWorkspaceNameFilesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req = new operations.ListFilesApiV1WorkspacesWorkspaceNameFilesGetRequest(
        req
      );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/files",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ListFilesApiV1WorkspacesWorkspaceNameFilesGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ListFilesApiV1WorkspacesWorkspaceNameFilesGetResponse =
      new operations.ListFilesApiV1WorkspacesWorkspaceNameFilesGetResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.filePagination = utils.objectToClass(
            httpRes?.data,
            shared.FilePagination
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Update File Meta
   *
   * @remarks
   * Updates the metadata of a file. You can modify existing metadata or add new ones. The metadata of the documents that were created
   * from this file will also be updated.
   */
  async updateMetaData(
    req: operations.UpdateFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaPutRequest,
    security: operations.UpdateFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaPutSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UpdateFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaPutResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.UpdateFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaPutRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/files/{file_id}/meta",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "requestBody",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.UpdateFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaPutSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "put",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.UpdateFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaPutResponse =
      new operations.UpdateFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaPutResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.updateFileMetaApiV1WorkspacesWorkspaceNameFilesFileIdMetaPut200ApplicationJSONAny =
            httpRes?.data;
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Upload File
   *
   * @remarks
   * Uploads a file into the workspace. You can also use this endpoint to create a text file. To do that, enter the file name and text as its contents.
   */
  async upload(
    req: operations.UploadFileApiV1WorkspacesWorkspaceNameFilesPostRequest,
    security: operations.UploadFileApiV1WorkspacesWorkspaceNameFilesPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.UploadFileApiV1WorkspacesWorkspaceNameFilesPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.UploadFileApiV1WorkspacesWorkspaceNameFilesPostRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/files",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "bodyUploadFileApiV1WorkspacesWorkspaceNameFilesPost",
        "multipart"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.UploadFileApiV1WorkspacesWorkspaceNameFilesPostSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.UploadFileApiV1WorkspacesWorkspaceNameFilesPostResponse =
      new operations.UploadFileApiV1WorkspacesWorkspaceNameFilesPostResponse({
        statusCode: httpRes.status,
        contentType: contentType,
        rawResponse: httpRes,
      });
    switch (true) {
      case httpRes?.status == 201:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.responseUploadFileApiV1WorkspacesWorkspaceNameFilesPost =
            utils.objectToClass(httpRes?.data);
        }
        break;
      case [400, 409, 413, 415].includes(httpRes?.status):
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class DocumentStore {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Check Connection [private]
     *
     * @remarks
     * Checks the connection to the Opensearch document store and checks if the pipeline_name (index) exists. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
     */
    async checkConnection(
        req: operations.CheckConnectionApiV1WorkspacesWorkspaceNameIndexesIndexNameGetRequest,
        security: operations.CheckConnectionApiV1WorkspacesWorkspaceNameIndexesIndexNameGetSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CheckConnectionApiV1WorkspacesWorkspaceNameIndexesIndexNameGetResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.CheckConnectionApiV1WorkspacesWorkspaceNameIndexesIndexNameGetRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/indexes/{index_name}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.CheckConnectionApiV1WorkspacesWorkspaceNameIndexesIndexNameGetSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CheckConnectionApiV1WorkspacesWorkspaceNameIndexesIndexNameGetResponse =
            new operations.CheckConnectionApiV1WorkspacesWorkspaceNameIndexesIndexNameGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.documentStore = utils.objectToClass(httpRes?.data, shared.DocumentStore);
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Count Documents Stream [private]
     *
     * @remarks
     * Returns the number of documents for a pipeline. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
     */
    async countDocuments(
        req: operations.CountDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsCountPostRequest,
        security: operations.CountDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsCountPostSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.CountDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsCountPostResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.CountDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsCountPostRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/indexes/{index_name}/documents-count",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "countDocumentsParams",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.CountDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsCountPostSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.CountDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsCountPostResponse =
            new operations.CountDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsCountPostResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.dcDocumentCount = utils.objectToClass(
                        httpRes?.data,
                        shared.DCDocumentCount
                    );
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get Document [private]
     *
     * @remarks
     * Displays the document content and its properties. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
     */
    async get(
        req: operations.GetDocumentApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsDocumentIdGetRequest,
        security: operations.GetDocumentApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsDocumentIdGetSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetDocumentApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsDocumentIdGetResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetDocumentApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsDocumentIdGetRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/indexes/{index_name}/documents/{document_id}",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetDocumentApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsDocumentIdGetSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetDocumentApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsDocumentIdGetResponse =
            new operations.GetDocumentApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsDocumentIdGetResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.deepsetCloudDocument = utils.objectToClass(
                        httpRes?.data,
                        shared.DeepsetCloudDocument
                    );
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get All Documents Stream
     *
     * @remarks
     * Returns all documents created for a pipeline.
     */
    async listDocumentStreams(
        req: operations.GetAllDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsStreamPostRequest,
        security: operations.GetAllDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsStreamPostSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetAllDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsStreamPostResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetAllDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsStreamPostRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/indexes/{index_name}/documents-stream",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "fetchDocumentsParams",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetAllDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsStreamPostSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetAllDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsStreamPostResponse =
            new operations.GetAllDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsStreamPostResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 200:
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Get All Documents [private]
     *
     * @remarks
     * Displays all documents processed by the specified pipeline together with their properties. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
     */
    async listDocuments(
        req: operations.GetAllDocumentsApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsGetRequest,
        security: operations.GetAllDocumentsApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsGetSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetAllDocumentsApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsGetResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.GetAllDocumentsApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsGetRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/indexes/{index_name}/documents",
            req
        );

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.GetAllDocumentsApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsGetSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        const queryParams: string = utils.serializeQueryParams(req);
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url + queryParams,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetAllDocumentsApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsGetResponse =
            new operations.GetAllDocumentsApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsGetResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.deepsetCloudDocuments = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.deepsetCloudDocuments = utils.objectToClass(
                        httpRes?.data,
                        shared.DeepsetCloudDocument,
                        resFieldDepth
                    );
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Query Documents Stream
     *
     * @remarks
     * Searches the documents for the specified query.
     */
    async search(
        req: operations.QueryDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsQueryPostRequest,
        security: operations.QueryDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsQueryPostSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.QueryDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsQueryPostResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.QueryDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsQueryPostRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/workspaces/{workspace_name}/indexes/{index_name}/documents-query",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
                req,
                "queryDocumentsParams",
                "json"
            );
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.QueryDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsQueryPostSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.QueryDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsQueryPostResponse =
            new operations.QueryDocumentsStreamApiV1WorkspacesWorkspaceNameIndexesIndexNameDocumentsQueryPostResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.deepsetCloudDocuments = [];
                    const resFieldDepth: number = utils.getResFieldDepth(res);
                    res.deepsetCloudDocuments = utils.objectToClass(
                        httpRes?.data,
                        shared.DeepsetCloudDocument,
                        resFieldDepth
                    );
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }
}

/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { SDKConfiguration } from "./sdk";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class Organization {
    private sdkConfiguration: SDKConfiguration;

    constructor(sdkConfig: SDKConfiguration) {
        this.sdkConfiguration = sdkConfig;
    }

    /**
     * Get Organization [private]
     *
     * @remarks
     * Returns the name of the organization. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
     */
    async get(
        security: operations.GetOrganizationApiV1OrganizationGetSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.GetOrganizationApiV1OrganizationGetResponse> {
        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = baseURL.replace(/\/$/, "") + "/api/v1/organization";

        if (!(security instanceof utils.SpeakeasyBase)) {
            security = new operations.GetOrganizationApiV1OrganizationGetSecurity(security);
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...config?.headers };
        headers["Accept"] = "application/json";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "get",
            headers: headers,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.GetOrganizationApiV1OrganizationGetResponse =
            new operations.GetOrganizationApiV1OrganizationGetResponse({
                statusCode: httpRes.status,
                contentType: contentType,
                rawResponse: httpRes,
            });
        switch (true) {
            case httpRes?.status == 200:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.organizationName = utils.objectToClass(
                        httpRes?.data,
                        shared.OrganizationName
                    );
                }
                break;
        }

        return res;
    }

    /**
     * Invite User To Organization [private]
     *
     * @remarks
     * Sends an email to the user inviting them to your deepset Cloud organization. This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
     */
    async invite(
        req: operations.InviteUserToOrganizationApiV1OrganizationOrganizationIdInvitationPostRequest,
        security: operations.InviteUserToOrganizationApiV1OrganizationOrganizationIdInvitationPostSecurity,
        config?: AxiosRequestConfig
    ): Promise<operations.InviteUserToOrganizationApiV1OrganizationOrganizationIdInvitationPostResponse> {
        if (!(req instanceof utils.SpeakeasyBase)) {
            req =
                new operations.InviteUserToOrganizationApiV1OrganizationOrganizationIdInvitationPostRequest(
                    req
                );
        }

        const baseURL: string = utils.templateUrl(
            this.sdkConfiguration.serverURL,
            this.sdkConfiguration.serverDefaults
        );
        const url: string = utils.generateURL(
            baseURL,
            "/api/v1/organization/{organization_id}/invitation",
            req
        );

        let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

        try {
            [reqBodyHeaders, reqBody] = utils.serializeRequestBody(req, "requestBody", "json");
        } catch (e: unknown) {
            if (e instanceof Error) {
                throw new Error(`Error serializing request body, cause: ${e.message}`);
            }
        }

        if (!(security instanceof utils.SpeakeasyBase)) {
            security =
                new operations.InviteUserToOrganizationApiV1OrganizationOrganizationIdInvitationPostSecurity(
                    security
                );
        }
        const client: AxiosInstance = utils.createSecurityClient(
            this.sdkConfiguration.defaultClient,
            security
        );

        const headers = { ...reqBodyHeaders, ...config?.headers };
        if (reqBody == null || Object.keys(reqBody).length === 0)
            throw new Error("request body is required");
        headers["Accept"] = "application/json;q=1, application/json;q=0";
        headers[
            "user-agent"
        ] = `speakeasy-sdk/${this.sdkConfiguration.language} ${this.sdkConfiguration.sdkVersion} ${this.sdkConfiguration.genVersion}`;

        const httpRes: AxiosResponse = await client.request({
            validateStatus: () => true,
            url: url,
            method: "post",
            headers: headers,
            data: reqBody,
            ...config,
        });

        const contentType: string = httpRes?.headers?.["content-type"] ?? "";

        if (httpRes?.status == null) {
            throw new Error(`status code not found in response: ${httpRes}`);
        }

        const res: operations.InviteUserToOrganizationApiV1OrganizationOrganizationIdInvitationPostResponse =
            new operations.InviteUserToOrganizationApiV1OrganizationOrganizationIdInvitationPostResponse(
                {
                    statusCode: httpRes.status,
                    contentType: contentType,
                    rawResponse: httpRes,
                }
            );
        switch (true) {
            case httpRes?.status == 201:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.inviteUserToOrganizationApiV1OrganizationOrganizationIdInvitationPost201ApplicationJSONAny =
                        httpRes?.data;
                }
                break;
            case httpRes?.status == 422:
                if (utils.matchContentType(contentType, `application/json`)) {
                    res.httpValidationError = utils.objectToClass(
                        httpRes?.data,
                        shared.HTTPValidationError
                    );
                }
                break;
        }

        return res;
    }
}

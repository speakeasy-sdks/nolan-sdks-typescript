/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { Expose } from "class-transformer";

/**
 * An enumeration.
 */
export enum LabelWithPredictionLabelStateAsStr {
    MatchingNotStarted = "MATCHING_NOT_STARTED",
    Matched = "MATCHED",
    NoMatchFound = "NO_MATCH_FOUND",
    CandidatesFound = "CANDIDATES_FOUND",
}

export class LabelWithPrediction extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "answer" })
    answer?: string;

    @SpeakeasyMetadata()
    @Expose({ name: "answer_end" })
    answerEnd?: number;

    /**
     * 'True' if the answer matched the gold answer of this specific label.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "answer_exact_match" })
    answerExactMatch?: boolean;

    /**
     * 'True' if the document matched the gold document of this specific label.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "answer_match" })
    answerMatch?: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "answer_start" })
    answerStart?: number;

    /**
     * A dictionary that holds the UUID as key and score as value for each candidate in the label to file matching.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "candidates" })
    candidates?: Record<string, number>;

    @SpeakeasyMetadata()
    @Expose({ name: "context" })
    context?: string;

    /**
     * Similarity of the context with the gold context of this specific label.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "context_similarity" })
    contextSimilarity: number;

    /**
     * 'True' if the selected document ID matched with the gold ID of this specific label.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "document_id_match" })
    documentIdMatch: boolean;

    @SpeakeasyMetadata()
    @Expose({ name: "external_file_name" })
    externalFileName?: string;

    /**
     * F1 score for this specific label.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "f1" })
    f1?: number;

    @SpeakeasyMetadata()
    @Expose({ name: "file_id" })
    fileId?: string;

    /**
     * Filters you can use to narrow down the search. For more information, see [metadata filtering](https://docs.haystack.deepset.ai/docs/metadata-filtering).
     */
    @SpeakeasyMetadata()
    @Expose({ name: "filters" })
    filters?: Record<string, any>;

    /**
     * Unique identifier of a label
     */
    @SpeakeasyMetadata()
    @Expose({ name: "label_id" })
    labelId: string;

    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    meta: Record<string, any>;

    @SpeakeasyMetadata()
    @Expose({ name: "query" })
    query: string;

    /**
     * The SAS score for this specific label.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "sas" })
    sas?: number;

    /**
     * Represents the current state for matching a file.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "state" })
    state: LabelWithPredictionLabelStateAsStr;
}

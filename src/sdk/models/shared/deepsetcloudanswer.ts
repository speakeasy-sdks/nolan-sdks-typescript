/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { DeepsetCloudSpan } from "./deepsetcloudspan";
import { Expose, Type } from "class-transformer";

/**
 * Context of the answer.
 */
export class DeepsetCloudAnswerContextContext extends SpeakeasyBase {}

/**
 * Object containing the `file_id` and `name` of a file. This is used to associate a document with a file.
 */
export class DeepsetCloudAnswerFileReferenceObjectDeprecatedUseFilesInstead extends SpeakeasyBase {}

export class DeepsetCloudAnswerFiles extends SpeakeasyBase {}

/**
 * The metadata of this document.
 */
export class DeepsetCloudAnswerMetadataOfFile extends SpeakeasyBase {}

/**
 * Type of the answer.
 */
export enum DeepsetCloudAnswerAnswerType {
    Generative = "generative",
    Extractive = "extractive",
    Other = "other",
}

export class DeepsetCloudAnswer extends SpeakeasyBase {
    @SpeakeasyMetadata()
    @Expose({ name: "answer" })
    answer: string;

    /**
     * Context of the answer.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "context" })
    context?: any;

    /**
     * ID of the document
     */
    @SpeakeasyMetadata()
    @Expose({ name: "document_id" })
    documentId?: string;

    /**
     * IDs of the document
     */
    @SpeakeasyMetadata()
    @Expose({ name: "document_ids" })
    documentIds?: string[];

    /**
     * Object containing the `file_id` and `name` of a file. This is used to associate a document with a file.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "file" })
    @Type(() => DeepsetCloudAnswerFileReferenceObjectDeprecatedUseFilesInstead)
    file?: DeepsetCloudAnswerFileReferenceObjectDeprecatedUseFilesInstead;

    /**
     * List of object containing the `file_id` and `name` of a file. This is used to associate an answer with its source files.
     */
    @SpeakeasyMetadata({ elemType: DeepsetCloudAnswerFiles })
    @Expose({ name: "files" })
    @Type(() => DeepsetCloudAnswerFiles)
    files?: DeepsetCloudAnswerFiles[];

    /**
     * The metadata of this document.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "meta" })
    @Type(() => DeepsetCloudAnswerMetadataOfFile)
    meta?: DeepsetCloudAnswerMetadataOfFile;

    /**
     * Offsets of the answer in the context.
     */
    @SpeakeasyMetadata({ elemType: DeepsetCloudSpan })
    @Expose({ name: "offsets_in_context" })
    @Type(() => DeepsetCloudSpan)
    offsetsInContext?: DeepsetCloudSpan[];

    /**
     * Offsets of the answer in the document.
     */
    @SpeakeasyMetadata({ elemType: DeepsetCloudSpan })
    @Expose({ name: "offsets_in_document" })
    @Type(() => DeepsetCloudSpan)
    offsetsInDocument?: DeepsetCloudSpan[];

    /**
     * The prompt that was used to generate the result.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "prompt" })
    prompt?: string;

    /**
     * Unique identifier of the result.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "result_id" })
    resultId?: string;

    /**
     * Score of the answer.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "score" })
    score?: number;

    /**
     * Type of the answer.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: DeepsetCloudAnswerAnswerType;
}

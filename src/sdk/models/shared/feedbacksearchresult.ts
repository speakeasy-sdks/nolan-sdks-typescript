/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SpeakeasyBase, SpeakeasyMetadata } from "../../../internal/utils";
import { PipelineFeedbackFile } from "./pipelinefeedbackfile";
import { Expose, Transform, Type } from "class-transformer";

/**
 * Shows information about the file which contains the search result.
 */
export class FeedbackSearchResultPipelineFeedbackFile extends SpeakeasyBase {
    /**
     * Unique identifier of a file.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "id" })
    id?: string;

    /**
     * Name of the file
     */
    @SpeakeasyMetadata()
    @Expose({ name: "name" })
    name?: string;
}

/**
 * The user who gave feedback to the search result.
 */
export class FeedbackSearchResultFeedbackSearchQueryFeedbackUser extends SpeakeasyBase {
    /**
     * Email of a user
     */
    @SpeakeasyMetadata()
    @Expose({ name: "email" })
    email?: string;

    /**
     * Family name of a user
     */
    @SpeakeasyMetadata()
    @Expose({ name: "family_name" })
    familyName: string;

    /**
     * Given name of a user
     */
    @SpeakeasyMetadata()
    @Expose({ name: "given_name" })
    givenName: string;
}

/**
 * Shows information about the search query which returned this result.
 */
export class FeedbackSearchResultFeedbackSearchQuery extends SpeakeasyBase {
    /**
     * Specifies when the search query was done.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "created_at" })
    @Transform(({ value }) => new Date(value), { toClassOnly: true })
    createdAt: Date;

    /**
     * The number of seconds the pipeline took to find the answer.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "duration" })
    duration: number;

    /**
     * Shows which metadata filters were used for the search query.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "filters" })
    filters?: Record<string, any>;

    /**
     * The search query
     */
    @SpeakeasyMetadata()
    @Expose({ name: "query" })
    query: string;

    /**
     * Unique identifier of the search query.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "query_id" })
    queryId: string;

    /**
     * The user who gave feedback to the search result.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "user" })
    @Type(() => FeedbackSearchResultFeedbackSearchQueryFeedbackUser)
    user: FeedbackSearchResultFeedbackSearchQueryFeedbackUser;
}

/**
 * An enumeration.
 */
export enum FeedbackSearchResultSearchType {
    Document = "document",
    Extractive = "extractive",
    Generative = "generative",
}

export class FeedbackSearchResult extends SpeakeasyBase {
    /**
     * Shows the query answer. This is only returned for question answering pipelines.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "answer" })
    answer?: string;

    /**
     * Shows the context of the search result.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "context" })
    context?: string;

    /**
     * Shows the documents which contain the search results.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "documents" })
    documents: Record<string, any>[];

    /**
     * Shows information about the file which contains the search result.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "file" })
    @Type(() => FeedbackSearchResultPipelineFeedbackFile)
    file: FeedbackSearchResultPipelineFeedbackFile;

    /**
     * Shows information about the files which contain the search results.
     */
    @SpeakeasyMetadata({ elemType: PipelineFeedbackFile })
    @Expose({ name: "files" })
    @Type(() => PipelineFeedbackFile)
    files: PipelineFeedbackFile[];

    /**
     * Specifies the offset of the answer within the context.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "offsets_in_context" })
    offsetsInContext?: Record<string, number>[];

    /**
     * The prompt that was used to generate the result.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "prompt" })
    prompt?: string;

    /**
     * Shows the rank of the prediction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "rank" })
    rank?: number;

    /**
     * Shows the relevance score of the prediction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "score" })
    score?: number;

    /**
     * Shows information about the search query which returned this result.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "search" })
    @Type(() => FeedbackSearchResultFeedbackSearchQuery)
    search: FeedbackSearchResultFeedbackSearchQuery;

    /**
     * Unique identifier of this search result
     */
    @SpeakeasyMetadata()
    @Expose({ name: "search_result_history_id" })
    searchResultHistoryId: string;

    /**
     * Shows the type of the prediction.
     */
    @SpeakeasyMetadata()
    @Expose({ name: "type" })
    type: FeedbackSearchResultSearchType;
}

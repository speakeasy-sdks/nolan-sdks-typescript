/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import * as utils from "../internal/utils";
import * as operations from "./models/operations";
import * as shared from "./models/shared";
import { AxiosInstance, AxiosRequestConfig, AxiosResponse } from "axios";

export class SharedPrototype {
  _defaultClient: AxiosInstance;
  _securityClient: AxiosInstance;
  _serverURL: string;
  _language: string;
  _sdkVersion: string;
  _genVersion: string;

  constructor(
    defaultClient: AxiosInstance,
    securityClient: AxiosInstance,
    serverURL: string,
    language: string,
    sdkVersion: string,
    genVersion: string
  ) {
    this._defaultClient = defaultClient;
    this._securityClient = securityClient;
    this._serverURL = serverURL;
    this._language = language;
    this._sdkVersion = sdkVersion;
    this._genVersion = genVersion;
  }

  /**
   * Create Prototype [private]
   *
   * @remarks
   * This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
   */
  async create(
    req: operations.CreatePrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesPostRequest,
    security: operations.CreatePrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreatePrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CreatePrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesPostRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/shared_prototypes",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "postSharedPrototype",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CreatePrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesPostSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "post",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.CreatePrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesPostResponse =
      new operations.CreatePrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesPostResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 201:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.sharedPrototype = utils.objectToClass(
            httpRes?.data,
            shared.SharedPrototype
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Create External User [private]
   *
   * @remarks
   * This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
   */
  async createExternalUser(
    req: operations.CreateExternalUserApiV1WorkspacesWorkspaceNameSharedPrototypeUsersPostRequest,
    security: operations.CreateExternalUserApiV1WorkspacesWorkspaceNameSharedPrototypeUsersPostSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.CreateExternalUserApiV1WorkspacesWorkspaceNameSharedPrototypeUsersPostResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.CreateExternalUserApiV1WorkspacesWorkspaceNameSharedPrototypeUsersPostRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/shared_prototype_users",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.CreateExternalUserApiV1WorkspacesWorkspaceNameSharedPrototypeUsersPostSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "post",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.CreateExternalUserApiV1WorkspacesWorkspaceNameSharedPrototypeUsersPostResponse =
      new operations.CreateExternalUserApiV1WorkspacesWorkspaceNameSharedPrototypeUsersPostResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case [200, 201].includes(httpRes?.status):
        if (utils.matchContentType(contentType, `application/json`)) {
          res.externalUserInformation = utils.objectToClass(
            httpRes?.data,
            shared.ExternalUserInformation
          );
        }
        break;
      case [400, 404].includes(httpRes?.status):
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Get Shared Prototype [private]
   *
   * @remarks
   * This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
   */
  async get(
    req: operations.GetSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdGetRequest,
    security: operations.GetSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.GetSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.GetSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/shared_prototypes/{shared_prototype_id}",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.GetSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.GetSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdGetResponse =
      new operations.GetSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdGetResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.sharedPrototype = utils.objectToClass(
            httpRes?.data,
            shared.SharedPrototype
          );
        }
        break;
      case httpRes?.status == 404:
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * List Prototypes [private]
   *
   * @remarks
   * This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
   */
  async list(
    req: operations.ListPrototypesApiV1WorkspacesWorkspaceNameSharedPrototypesGetRequest,
    security: operations.ListPrototypesApiV1WorkspacesWorkspaceNameSharedPrototypesGetSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.ListPrototypesApiV1WorkspacesWorkspaceNameSharedPrototypesGetResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.ListPrototypesApiV1WorkspacesWorkspaceNameSharedPrototypesGetRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/shared_prototypes",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.ListPrototypesApiV1WorkspacesWorkspaceNameSharedPrototypesGetSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const queryParams: string = utils.serializeQueryParams(req);

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url + queryParams,
      method: "get",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.ListPrototypesApiV1WorkspacesWorkspaceNameSharedPrototypesGetResponse =
      new operations.ListPrototypesApiV1WorkspacesWorkspaceNameSharedPrototypesGetResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.paginatedSharedPrototypes = utils.objectToClass(
            httpRes?.data,
            shared.PaginatedSharedPrototypes
          );
        }
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Revoke Shared Prototype [private]
   *
   * @remarks
   * This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
   */
  async revoke(
    req: operations.RevokeSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdDeleteRequest,
    security: operations.RevokeSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdDeleteSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.RevokeSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdDeleteResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.RevokeSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdDeleteRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/shared_prototypes/{shared_prototype_id}",
      req
    );

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.RevokeSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdDeleteSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "delete",
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.RevokeSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdDeleteResponse =
      new operations.RevokeSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdDeleteResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.revokeSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdDelete200ApplicationJSONAny =
            httpRes?.data;
        }
        break;
      case httpRes?.status == 404:
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }

  /**
   * Edit Shared Prototype [private]
   *
   * @remarks
   * This is an endpoint we use internally. This means it can change anytime so bear this in mind if you want to use it.
   */
  async update(
    req: operations.EditSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdPatchRequest,
    security: operations.EditSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdPatchSecurity,
    config?: AxiosRequestConfig
  ): Promise<operations.EditSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdPatchResponse> {
    if (!(req instanceof utils.SpeakeasyBase)) {
      req =
        new operations.EditSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdPatchRequest(
          req
        );
    }

    const baseURL: string = this._serverURL;
    const url: string = utils.generateURL(
      baseURL,
      "/api/v1/workspaces/{workspace_name}/shared_prototypes/{shared_prototype_id}",
      req
    );

    let [reqBodyHeaders, reqBody]: [object, any] = [{}, {}];

    try {
      [reqBodyHeaders, reqBody] = utils.serializeRequestBody(
        req,
        "patchSharedPrototype",
        "json"
      );
    } catch (e: unknown) {
      if (e instanceof Error) {
        throw new Error(`Error serializing request body, cause: ${e.message}`);
      }
    }

    if (!(security instanceof utils.SpeakeasyBase)) {
      security =
        new operations.EditSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdPatchSecurity(
          security
        );
    }
    const client: AxiosInstance = utils.createSecurityClient(
      this._defaultClient,
      security
    );

    const headers = { ...reqBodyHeaders, ...config?.headers };
    if (reqBody == null || Object.keys(reqBody).length === 0)
      throw new Error("request body is required");

    const httpRes: AxiosResponse = await client.request({
      validateStatus: () => true,
      url: url,
      method: "patch",
      headers: headers,
      data: reqBody,
      ...config,
    });

    const contentType: string = httpRes?.headers?.["content-type"] ?? "";

    if (httpRes?.status == null) {
      throw new Error(`status code not found in response: ${httpRes}`);
    }

    const res: operations.EditSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdPatchResponse =
      new operations.EditSharedPrototypeApiV1WorkspacesWorkspaceNameSharedPrototypesSharedPrototypeIdPatchResponse(
        {
          statusCode: httpRes.status,
          contentType: contentType,
          rawResponse: httpRes,
        }
      );
    switch (true) {
      case httpRes?.status == 200:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.sharedPrototype = utils.objectToClass(
            httpRes?.data,
            shared.SharedPrototype
          );
        }
        break;
      case httpRes?.status == 404:
        break;
      case httpRes?.status == 422:
        if (utils.matchContentType(contentType, `application/json`)) {
          res.httpValidationError = utils.objectToClass(
            httpRes?.data,
            shared.HTTPValidationError
          );
        }
        break;
    }

    return res;
  }
}
